/**

数组中占比超过一半的元素称之为主要元素。给你一个 整数 数组，找出其中的主要元素。若没有，返回 -1 。请设计时间复杂度为 O(N) 、空间复杂度为 O(1) 的解决方案。

 

示例 1：

输入：[1,2,5,9,5,9,5,5,5]
输出：5
示例 2：

输入：[3,2]
输出：-1
示例 3：

输入：[2,2,1,1,1,2,2]
输出：2
*/ 

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int cond = -1;
        int count = 0;
        int key = nums.size() / 2;

        for (int i = 0; i < nums.size(); i ++) {
            if (count == 0) {
                cond = nums[i];
            }
            
            if (nums[i] == cond) {
                count ++;
            }
            else {
                count --;
            }
        }

        count = 0;
        for (int i = 0; i < nums.size(); i ++) {
            if (cond == nums[i]) {
                count ++;
            }
        }

        return count > key ? cond : -1;
    }
};
